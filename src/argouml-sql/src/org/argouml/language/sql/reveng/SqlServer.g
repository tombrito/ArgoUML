/* $Id$
 *******************************************************************************
 * Copyright (c) 2013 Contributors - see below
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Laurent BRAUD
 *******************************************************************************
 *
 */
 /*
  * A grammar for reading script generated by SqlSerevr
  * 
  */
 
grammar SqlServer; 

@header {
package org.argouml.language.sql.reveng;

import org.argouml.language.sql.TableDefinition;
import org.argouml.language.sql.ColumnDefinition;
import org.argouml.language.sql.ForeignKeyDefinition;

} 

@members {
	private Lexer _lexer = null;

	private Modeller _modeller;

	boolean readSpace = false;
	public Modeller getModeller() {
        return _modeller;
    }
    
    public void setModeller(Modeller modeller) {
        _modeller = modeller;
    }
}

@lexer::header {
package org.argouml.language.sql.reveng;

}

dump_read [Modeller modeller, Lexer lexer]
    @init{
        setModeller(modeller);
        _lexer = lexer;
        
    }
: 
    'USE' name_with_esc
    (instr)*
    {
		getModeller().generateModele();
	}

;
instr : 
 	dumpComment
 	| 'GO'
 	| set_instr
	| create_table_statement
	| alter_table_statement
	
;

set_instr :
	'SET'
	(
		'ANSI_NULLS'
		| 'QUOTED_IDENTIFIER'
		| 'ANSI_PADDING'
	)
	(
		'ON' | 'OFF'
	)
;

dumpComment: 
	SL_COMMENT
	| ML_COMMENT (';')?
;
	
create_table_statement : 
	'CREATE' 'TABLE'
			name_with_esc DOT table_name {
    		 	TableDefinition table = getModeller().getTableFromName($table_name.name);
			}
    		
             create_definition_list[table]
             table_store

;

alter_table_statement :
	'ALTER' 'TABLE'
		name_with_esc DOT table_name {
    		 TableDefinition table = getModeller().getTableFromName($table_name.name);
		}
		('WITH' 'CHECK')?
		
		(
		'ADD' constraint_def[table]
		| 'CHECK' 'CONSTRAINT' (symbol)?
		)
;



create_definition_list [TableDefinition table]
    : LEFT_PAREN create_definition[table] (COMMA create_definition[table])*   RIGHT_PAREN
; 


table_store :
	misc_store
;
	

misc_store :
	'ON' 
	(
		'[' 'PRIMARY' ']'
	)
;
create_definition [TableDefinition table]: 
        constraint_def[table]
        |
         column_name {
         	ColumnDefinition col = ColumnDefinition.findOrCreateColumnDefinition(table, $column_name.cn);
         } data_type_def[col]
         
;
	
constraint_def [TableDefinition table] returns [String constrName] :
	 ('CONSTRAINT' symbol
	 	{
	 		$constrName =  $symbol.name;
	 	} 
	 )? 
	 
	 (
	 constraint_unique 
	 | constraint_fk[table, constrName]
	 | constraint_pk 
	 | constraint_df[table]
	 )
	 
;


constraint_df [TableDefinition table] 
@init {
	ColumnDefinition col1 = new ColumnDefinition();
} :
	'DEFAULT' default_statement[col1]
	'FOR' column_name {
		ColumnDefinition col = ColumnDefinition.findOrCreateColumnDefinition(table, $column_name.cn);
		col.setDefaultValue(col1.getDefaultValue());
	}
	
	 
;

constraint_unique :
	'UNIQUE' ('INDEX' | 'KEY')? (index_name)? (index_type)?  columns_list_name
;
constraint_fk [TableDefinition table, String constrName] :
	'FOREIGN' 'KEY' (symbol)?
	{
		ForeignKeyDefinition fk = new ForeignKeyDefinition($table);
		fk.setForeignKeyName($constrName);
	}
	columns_list_name
	{
		for(String colName : $columns_list_name.listColumn) {
			fk.addColumnDefinition(colName);
		}
	}
	reference_definition[fk]
;

constraint_pk :
	'PRIMARY' 'KEY' 
	( 'CLUSTERED' | 'NONCLUSTERED' )? 
	columns_list_name_order
	(pk_with_option)?
	(misc_store)?
;

pk_with_option :
	'WITH' LEFT_PAREN index_option (COMMA index_option)* RIGHT_PAREN
;

index_option :
	'PAD_INDEX' '=' ('ON' | 'OFF') 
  | 'FILLFACTOR'  '=' ( ID | NUMBER | text_quoted )
  | 'IGNORE_DUP_KEY' '=' ('ON' | 'OFF') 
  | 'STATISTICS_NORECOMPUTE' '=' ('ON' | 'OFF') 
  | 'ALLOW_ROW_LOCKS' '=' ('ON' | 'OFF') 
  | 'ALLOW_PAGE_LOCKS' '=' ('ON' | 'OFF') 
  | 'DATA_COMPRESSION' '=' ( 'NONE' | 'ROW' | 'PAGE' )
;

reference_definition [ForeignKeyDefinition fk] :
	'REFERENCES' 
	name_with_esc DOT table_name
	{
		TableDefinition tableRef = getModeller().getTableFromName($table_name.name);
		fk.setReferencesTable(tableRef);
		
	}
	columns_list_name
	{
		for(String colName : $columns_list_name.listColumn) {
			fk.addReferencesColumn(colName);
		}
	}
	
	('MATCH' ('FULL' | 'PARTIAL'))?
	('ON' ('DELETE' | 'UPDATE') reference_option )?
;

reference_option :
	'RESTRICT' | 'CASCADE' | 'SET' 'NULL' | 'NO' 'ACTION' | 'SET' 'DEFAULT'
;

columns_list_name_order returns [List<String> listColumn]:

	LEFT_PAREN c1=column_name ('ASC'| 'DESC')?
	{
		$listColumn = new ArrayList<String>();
		$listColumn.add($c1.cn);
	}
	( 
		COMMA c2=column_name ('ASC'| 'DESC')? {
			$listColumn.add($c2.cn);
		}
	)* RIGHT_PAREN 
;


columns_list_name returns [List<String> listColumn]:
	
	LEFT_PAREN c1=column_name 
	{
		$listColumn = new ArrayList<String>();
		$listColumn.add($c1.cn);
	}
	( 
		COMMA c2=column_name {
			$listColumn.add($c2.cn);
		}
	)* RIGHT_PAREN 
;

column_name returns [String cn] :
	name_with_esc {$cn = $name_with_esc.name;}
;
    
table_name returns [String name] :
    name_with_esc {$name = $name_with_esc.name;}
;

data_type_def [ColumnDefinition col] :
    data_type {$col.setDatatype($data_type.name);} 
    	(data_length)? {
    		$col.setLength($data_length.len);
    		$col.setNbDecimal($data_length.decimal);//can be null
    	}
   	 ( 'NOT' 'NULL' {
   	 	$col.setNullable(false);
   	 	} 
   	 	| 'NULL' {
   	 	$col.setNullable(true);
   	 	}
   	 )?
   	 ( 'DEFAULT' default_statement[col])?   
;
	
	
default_statement[ColumnDefinition col] :
	'NULL' {
		$col.setDefaultValue("NULL");
	}
	
	| '(' defaultValue[col] ')'
	
;

defaultValue[ColumnDefinition col] :
	text_quoted_keep {
		$col.setDefaultValue($text_quoted_keep.value);
	}
	|
	'(' NUMBER ')' { 
		$col.setDefaultValue($NUMBER.text);
	}
;

data_length returns [Integer len, Integer decimal] :
     LEFT_PAREN i1=NUMBER (COMMA i2=NUMBER {$decimal = Integer.valueOf($i2.text);} )? RIGHT_PAREN {$len = Integer.valueOf($i1.text);}
;
  
text_quoted returns [String value] :
	{
		int iStartToken = input.LT(1).getTokenIndex();
	}
	QUOTED_TEXT
	{
		value = $QUOTED_TEXT.text;
		value = value.substring(1);
		value = value.substring(0, value.length() -1 );
		value = value.replaceAll("''","'");
	}
;
   
text_quoted_keep returns [String value] :
	{
		int iStartToken = input.LT(1).getTokenIndex();
	}
	QUOTED_TEXT
	{
		value = $QUOTED_TEXT.text;
	}
;

schema : ID;
table : ID; 

data_type returns [String name] :
 name_with_esc {
 	$name = $name_with_esc.name; 
 }
;
index_name returns [String name] :
	(LEFT_PAREN)? name_with_esc {$name = $name_with_esc.name; } (RIGHT_PAREN)? ;

index_type :  'BTREE' | 'HASH';

symbol returns [String name] :
	name_with_esc  {$name = $name_with_esc.name; }
;
	
name_with_esc returns [String name] :
	'[' ID ']'
	{$name = $ID.text; } 
;

	
/*------------------------------------------------------------------
 * LEXER RULES
 *------------------------------------------------------------------*/
 
LEFT_PAREN : '(';
RIGHT_PAREN : ')';
COMMA : ',';
DOT :    '.';
NUMBER  :   (DIGIT)+;
ID  : (( LETTER | '_') (DIGIT)*)+ ;
WS : ( '\t' | ' ' | '\r' | '\n' | '\u000C' )+   { $channel = HIDDEN; } ;
  
SL_COMMENT : ( ('--'|'#') ~('\n'|'\r')* '\r'? '\n' );
ML_COMMENT : '/*' .* '*/';
 
QUOTED_TEXT : 
	'\'' 
	( ~
		(
			'\''
		)
	| 
		'\''
		'\''
	 )* 
	'\''
;

    
fragment LETTER : 'a'..'z' | 'A'..'Z';
  
fragment DIGIT :   '0'..'9' ;
